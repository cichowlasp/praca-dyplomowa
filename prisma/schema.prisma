generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Reviewed {
  APPROVED
  DECLINE
  NOTREVIEWED
}

model Order {
  id           String    @id @default(cuid())
  edited       Boolean   @default(false)
  reviewed     Reviewed  @default(NOTREVIEWED)
  authorId     String
  user         User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  informations Info[]
  messages     Message[]
}

model Message {
  id      String   @id @default(cuid())
  date    DateTime @default(now())
  name    String
  message String
  Order   Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String?
}

model Info {
  id      String  @id @default(cuid())
  name    String
  fill    String
  orderId String?
  Order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model User {
  id       String  @id @default(cuid())
  name     String?
  surname  String?
  email    String  @unique
  pin      String?
  password String?
  admin    Boolean @default(false)
  company  String?
  orders   Order[]
}

model Form {
  id      String   @id @default("main")
  active  Boolean  @default(false)
  inputs  Input[]
  selects Select[]
}

model Input {
  id          String  @id @default(cuid())
  placeholder String?
  type        String
  required    Boolean
  maxLength   Int?
  minLength   Int?
  formId      String?
  Form        Form?   @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model Select {
  id          String   @id @default(cuid())
  placeholder String?
  required    Boolean
  formId      String?
  Form        Form?    @relation(fields: [formId], references: [id], onDelete: Cascade)
  options     Option[]
}

model Option {
  id       String  @id @default(cuid())
  value    String
  selectId String?
  Select   Select? @relation(fields: [selectId], references: [id], onDelete: Cascade)
}
